/**
  * Created by hadoop on 17-5-24.
  */
import org.apache.spark.SparkConf
import org.apache.hadoop.hbase.{HBaseConfiguration, TableName}
import org.apache.hadoop.hbase.client.{ConnectionFactory, Put}
import org.apache.hadoop.hbase.util.Bytes
import org.apache.hadoop.hbase.client._
import org.apache.spark.SparkContext
import org.apache.log4j.{Level, Logger}

import scala.collection.mutable.ArrayBuffer
import HBase_Con._
import org.apache.hadoop.hbase.mapreduce.TableInputFormat
import java.util.{Date, Locale}
import java.text.SimpleDateFormat


object wenjia1 {
  def main(args: Array[String]) {
    Logger.getLogger("org.apache.spark").setLevel(Level.ERROR)
    Logger.getLogger("org.eclipse.jetty.server").setLevel(Level.OFF)
    val sparkConf = new SparkConf().setAppName("sji").setMaster("local[2]")
    sparkConf.set("spark.testing.memory", "2147480000")
    val sc = new SparkContext(sparkConf)
    val config = HBaseConfiguration.create()
    val conn = ConnectionFactory.createConnection(config)
    def Hbase_count(name: String): Long = {
      config.set(TableInputFormat.INPUT_TABLE, name)
      val stuRDD = sc.newAPIHadoopRDD(config, classOf[TableInputFormat],
        classOf[org.apache.hadoop.hbase.io.ImmutableBytesWritable],
        classOf[org.apache.hadoop.hbase.client.Result])
      val count = stuRDD.count()
      count
    }
    /*Hbase_truncate(conn,"00aabbcc")
     Hbase_truncate(conn,"temp_log")
     Hbase_truncate(conn,"store_temp")
     Hbase_truncate(conn,"store_log")
     Hbase_truncate(conn,"store_time")
     Hbase_truncate(conn,"human_times")
     Hbase_truncate(conn,"human_history")
     Hbase_truncate(conn,"new_old_history")
     Hbase_truncate(conn,"count_human_times")
     Hbase_truncate(conn,"shop_times")
     Hbase_truncate(conn,"interview_times")
     Hbase_truncate(conn,"jump_log")
     Hbase_truncate(conn,"deep_log")
     Hbase_truncate(conn,"activity_log")*/
    var A: ArrayBuffer[People] = null
    var B: ArrayBuffer[People] = null
    //次数define
    var x_num: Array[Int] = new Array[Int](6)
    var t_num: Array[Int] = new Array[Int](7)
    var h_num: Array[Int] = new Array[Int](7)

    var new_people: Long = 0
    var old_people: Long = 0

    var last_hour=new String
    var last_day:Int=24
    var last_week:Int=24*7
    var last_month:Int=24*30
    var ke_hour:Long=0
    var ke_day:Long=0
    var ke_week:Long=0
    var ke_month:Long=0
    var ru_hour:Long=0
    var ru_day:Long=0
    var ru_week:Long=0
    var ru_month:Long=0
    var zq1_hour:Long=0
    var zq1_day:Long=0
    var zq1_week:Long=0
    var zq1_month:Long=0
    var zq2_hour:Long=0
    var zq2_day:Long=0
    var zq2_week:Long=0
    var zq2_month:Long=0
    var zq3_hour:Long=0
    var zq3_day:Long=0
    var zq3_week:Long=0
    var zq3_month:Long=0
    var zq4_hour:Long=0
    var zq4_day:Long=0
    var zq4_week:Long=0
    var zq4_month:Long=0
    var zq5_hour:Long=0
    var zq5_day:Long=0
    var zq5_week:Long=0
    var zq5_month:Long=0
    var rur_hour:Double=0
    var rur_day:Double=0
    var rur_week:Double=0
    var rur_month:Double=0
    var new_hour:Long=0
    var new_day:Long=0
    var new_week:Long=0
    var new_month:Long=0
    var old_hour:Long=0
    var old_day:Long=0
    var old_week:Long=0
    var old_month:Long=0

    var flag_first=false
    val df=new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy",Locale.ENGLISH)
    val df2=new SimpleDateFormat("HH",Locale.ENGLISH)

    //while(false){

    val time1=df.format(new Date())
    val count_all:Long=Hbase_count("00aabbcc")

    //遍历temp
    A = Hbase_scan2(conn, "00aabbcc")
    if(A.length!=0) {
      //插入客流量日志
      Hbase_insert(conn, "temp_log", A(0).time, "count", "1", count_all.toString)
      Hbase_insert(conn, "keliu", "1", "now", "1", count_all.toString)
      //判断是进店铺还是出店铺
      for (i <- 0 until A.length by 1) {
        val human_in = Hbase_get(conn, "store_temp", A(i).mac, "time", "1")
        val human_last_time = Hbase_get(conn, "human_history", A(i).mac, "this_time", "1")
        if (A(i).range.toInt < 100) {
          //进入店铺的人，判断是否是刚进来的
          if (human_in == null) {
            Hbase_insert(conn, "store_temp", A(i).mac, "time", "1", A(i).time)
            //判断新老顾客，记录访问次数和时间
            val values = Hbase_get(conn, "human_times", A(i).mac, "values", "1")
            if (values == null) {
              x_num(0) += 1
              Hbase_insert(conn, "human_times", A(i).mac,"time", "1", A(i).time)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", "1")
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", A(i).time)
            }
            else{
              var x = values.toInt
              x += 1
              Hbase_insert(conn, "human_times", A(i).mac, "time", x.toString, A(i).time)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", x.toString)
              //来访次数
              if (x == 2) x_num(1) += 1
              else if (x == 3) x_num(2) += 1
              else if (x == 4) x_num(3) += 1
              else if (x == 5) x_num(4) += 1
              else x_num(5) += 1
              Hbase_insert(conn, "human_history", A(i).mac, "last_time", "1", human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", A(i).time)
              val n = Times.Time_Duration_Hours(A(i).time, human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "subtract", "1", n.toString)
              //来访周期
              if (n >= 0 && n < 24) t_num(0) += 1
              else if (n < 24* 7  && n >= 24) t_num(1) += 1
              else if (n < 24* 7  *2  && n >= 24* 7) t_num(2) += 1
              else if (n < 24 *30  && n >= 24* 7  *2) t_num(3) += 1
              else t_num(4) += 1
            }
          }
        }
        else {
          //在店铺外的人，判断是否是刚出去的
          if (human_in != null) {
            Hbase_deleteOne(conn, "store_temp", A(i).mac, "time", "1")
            //判断新老顾客，记录访问次数和时间
           /* val values = Hbase_get(conn, "human_times", A(i).mac, "values", "1")

            if (values == null) {
              x_num(0) += 1
              Hbase_insert(conn, "human_times", A(i).mac, "time", "1", human_in)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", "1")
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", human_in)
            }
            else {
              var x = values.toInt
              x += 1
              Hbase_insert(conn, "human_times", A(i).mac, "time", x.toString, human_in)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", x.toString)
              //来访次数
              if (x == 2) x_num(1) += 1
              else if (x == 3) x_num(2) += 1
              else if (x == 4) x_num(3) += 1
              else if (x == 5) x_num(4) += 1
              else x_num(5) += 1

              Hbase_insert(conn, "human_history", A(i).mac, "last_time", "1", human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", human_in)
              val n = Times.Time_Duration_Hours(human_in, human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "subtract", "1", n.toString)
              //来访周期
              if (n >= 0 && n < 24) t_num(0) += 1
              else if (n < 24* 7  && n >= 24) t_num(1) += 1
              else if (n < 24* 7  *2  && n >= 24* 7) t_num(2) += 1
              else if (n < 24 *30  && n >= 24* 7  *2) t_num(3) += 1
              else t_num(4) += 1
            }*/
            val out=Hbase_get(conn,"human_history",A(i).mac,"subtract","1")
            val oo=Hbase_get(conn, "human_times", A(i).mac, "values", "1")
            if(out!=null){
              val n=out.toInt
              val x=oo.toInt
              if (n >= 0 && n < 24) t_num(0) -= 1
              else if (n < 24* 7  && n >= 24) t_num(1) -= 1
              else if (n < 24* 7  *2  && n >= 24* 7) t_num(2) -= 1
              else if (n < 24 *30  && n >= 24* 7  *2) t_num(3) -= 1
              else t_num(4) -= 1

              if (x == 2) x_num(1) -= 1
              else if (x == 3) x_num(2) -= 1
              else if (x == 4) x_num(3) -= 1
              else if (x == 5) x_num(4) -= 1
              else x_num(5) += 1
            }
            else{
              x_num(0) -= 1
            }

            Hbase_insert(conn, "store_time", A(i).mac, "intime", "1", human_in)
            Hbase_insert(conn, "store_time", A(i).mac, "outtime", "1", A(i).time)
            val num = Times.Time_Duration_Seconds(A(i).time, human_in)
            Hbase_insert(conn, "store_time", A(i).mac, "subtract", "1", num.toString)
            //顾客活跃度
            if (num <= 1*60 && num >= 0) h_num(0) += 1
            else if (num > 1*60 && num <= 5*60) h_num(1) += 1
            else if (num > 5*60 && num <= 10*60) h_num(2) += 1
            else if (num > 10*60 && num <= 15*60) h_num(3) += 1
            else if (num > 15*60 && num <= 30*60) h_num(4) += 1
            else if (num > 30*60 && num < 60*60) h_num(5) += 1
            else h_num(6) += 1
          }
        }
      }

      Hbase_insert(conn, "count_human_times", A(0).time, "1", "1", x_num(0).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "2", "1", x_num(1).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "3", "1", x_num(2).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "4", "1", x_num(3).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "5", "1", x_num(4).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "other", "1", x_num(5).toString)

      Hbase_insert(conn, "shop_times", A(0).time, "1", "1", h_num(0).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "5", "1", h_num(1).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "10", "1", h_num(2).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "15", "1", h_num(3).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "30", "1", h_num(4).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "60", "1", h_num(5).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "other", "1", h_num(6).toString)

      Hbase_insert(conn, "interview_times", A(0).time, "12", "1", t_num(0).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "24", "1", t_num(1).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "36", "1", t_num(2).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "48", "1", t_num(3).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "60", "1", t_num(4).toString)

      Hbase_insert(conn, "zhouqi1", "1", "now", "1", t_num(0).toString)
      Hbase_insert(conn, "zhouqi2", "1", "now", "1", t_num(1).toString)
      Hbase_insert(conn, "zhouqi3", "1", "now", "1", t_num(2).toString)
      Hbase_insert(conn, "zhouqi4", "1", "now", "1", t_num(3).toString)
      Hbase_insert(conn, "zhouqi5", "1", "now", "1", t_num(4).toString)

      //计算入店量和入店率
      val count_in = Hbase_count("store_temp")
      Hbase_insert(conn, "store_log", A(0).time, "count", "1", count_in.toString)
      Hbase_insert(conn, "rudian", "1", "now", "1", count_in.toString)
      Hbase_insert(conn, "store_log", A(0).time, "rate", "1", (count_in.toDouble / count_all.toDouble).toString)
      Hbase_insert(conn, "rudr", "1", "now", "1", (count_in.toDouble / count_all.toDouble).toString)

      Hbase_insert(conn, "zhouqi1", "1", "rate", "1", (t_num(0).toDouble/count_in.toDouble).toString)
      Hbase_insert(conn, "zhouqi2", "1", "rate", "1", (t_num(1).toDouble/count_in.toDouble).toString)
      Hbase_insert(conn, "zhouqi3", "1", "rate", "1", (t_num(2).toDouble/count_in.toDouble).toString)
      Hbase_insert(conn, "zhouqi4", "1", "rate", "1", (t_num(3).toDouble/count_in.toDouble).toString)
      Hbase_insert(conn, "zhouqi5", "1", "rate", "1", (t_num(4).toDouble/count_in.toDouble).toString)
      //当前店铺里的新老顾客数
     /* B = Hbase_scan1(conn, "store_temp")
      new_people= 0
      old_people = 0
      for (i <- 0 until B.length by 1) {
        val human_in = Hbase_get(conn, "human_history", B(i).mac, "this_time", "1")
        if (human_in == null) {
          new_people += 1
        }
        else {
          old_people += 1
        }
      }
      if(B.length!=0) {
        Hbase_insert(conn, "new_old_history", B(0).time, "new", "1", new_people.toString)
        Hbase_insert(conn, "new_old_history", B(0).time, "old", "1", old_people.toString)
        Hbase_insert(conn, "new_old_history", B(0).time, "rate", "1", (new_people.toDouble / old_people.toDouble).toString)
      }*/
      Hbase_insert(conn, "new_old_history", A(0).time, "new", "1", x_num(0).toString)
      Hbase_insert(conn, "new_old_history", A(0).time, "old", "1", (count_in-x_num(0)).toString)
      Hbase_insert(conn, "new_old_history", A(0).time, "rate", "1", (x_num(0).toDouble / (count_in-x_num(0)).toDouble).toString)
      Hbase_insert(conn,"new_old","1","new","1", x_num(0).toString)
      Hbase_insert(conn,"new_old","1","old","1", (count_in-x_num(0)).toString)

      Hbase_insert(conn,"jump_log",A(0).time,"jump_human","1",h_num(0).toString)
      Hbase_insert(conn,"jump_log",A(0).time,"all_human","1",count_all.toString)
      Hbase_insert(conn,"jump_log",A(0).time,"rate","1",(h_num(0).toDouble/count_all.toDouble).toString)

      Hbase_insert(conn,"deep_log",A(0).time,"num","1",(h_num(5)+h_num(6)).toString)
      Hbase_insert(conn,"deep_log",A(0).time,"all","1",count_all.toString)
      Hbase_insert(conn,"deep_log",A(0).time,"rate","1",((h_num(5)+h_num(6)).toDouble/count_all.toDouble).toString)

      Hbase_insert(conn,"activity_log",A(0).time,"high","1",(t_num(0)+t_num(1)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"medium","1",(t_num(2)+t_num(3)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"low","1",(t_num(4)+t_num(5)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"sleep","1",t_num(6).toString)


      if(!flag_first){
        flag_first=true
        last_hour=A(0).time
        last_day=24
        last_week=24*7
        last_month=24*30
      }
      //记录历史(前一小时、一天、一周、一月）\环比（时、天、周、月）
      if(Times.Time_Duration_Minutes(A(0).time,last_hour)>=60){
        last_hour=A(0).time

        val HH=df2.format(new Date())
        Hbase_insert(conn, "day_keliu", "1", "hour", HH, ke_hour.toString)

        var hx = Hbase_get(conn, "keliu", "1", "hour", "2")
        if(hx!=null){
          Hbase_insert(conn, "keliu", "1", "hour", "3", hx)
        }
        var hx2 = Hbase_get(conn, "keliu", "1", "hour", "1")
        if(hx2!=null){
          val x:Double=(ke_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "keliu", "1", "h_hour", "1", x.toString)
          Hbase_insert(conn, "keliu", "1", "hour", "2", hx2)
        }
        Hbase_insert(conn, "keliu", "1", "hour", "1", ke_hour.toString)

        hx = Hbase_get(conn, "rudian", "1", "hour", "2")
        if(hx!=null){
          Hbase_insert(conn, "rudian", "1", "hour", "3", hx)
        }
        hx2 = Hbase_get(conn, "rudian", "1", "hour", "1")
        if(hx2!=null){
          val x:Double=(ru_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "rudian", "1", "h_hour", "1", x.toString)
          Hbase_insert(conn, "rudian", "1", "hour", "2", hx2)
        }
        Hbase_insert(conn, "rudian", "1", "hour", "1", ru_hour.toString)

        rur_hour=ru_hour.toDouble/ke_hour.toDouble
        hx = Hbase_get(conn, "rudr", "1", "hour", "2")
        if(hx!=null){
          Hbase_insert(conn, "rudr", "1", "hour", "3", hx)
        }
        hx2 = Hbase_get(conn, "rudr", "1", "hour", "1")
        if(hx2!=null){
          val x:Double=(rur_hour-hx2.toDouble)/hx2.toDouble
          Hbase_insert(conn, "rudr", "1", "h_hour", "1", x.toString)
          Hbase_insert(conn, "rudr", "1", "hour", "2", hx2)
        }
        Hbase_insert(conn, "rudr", "1", "hour", "1", rur_hour.toString)

        var xms=new_hour.toDouble/old_hour.toDouble
        hx2 = Hbase_get(conn, "new_old", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(xms-hx2.toDouble)/hx2.toDouble
          Hbase_insert(conn, "new_old", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "new_old", "1", "h_hour", "2", xms.toString)

        hx2 = Hbase_get(conn, "zhouqi1", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(zq1_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "zhouqi1", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "zhouqi1", "1", "h_hour", "2", zq1_hour.toString)
        hx2 = Hbase_get(conn, "zhouqi2", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(zq2_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "zhouqi2", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "zhouqi2", "1", "h_hour", "2", zq2_hour.toString)
        hx2 = Hbase_get(conn, "zhouqi3", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(zq3_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "zhouqi3", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "zhouqi3", "1", "h_hour", "2", zq3_hour.toString)
        hx2 = Hbase_get(conn, "zhouqi4", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(zq4_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "zhouqi4", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "zhouqi4", "1", "h_hour", "2", zq4_hour.toString)
        hx2 = Hbase_get(conn, "zhouqi5", "1", "h_hour", "2")
        if(hx2!=null){
          val x:Double=(zq5_hour-hx2.toInt).toDouble/hx2.toDouble
          Hbase_insert(conn, "zhouqi5", "1", "h_hour", "1", x.toString)
        }
        Hbase_insert(conn, "zhouqi5", "1", "h_hour", "2", zq5_hour.toString)

        last_day-=1
        last_month-=1
        last_week-=1
        if(last_day==0){
          last_day=24
          var dx = Hbase_get(conn, "keliu", "1", "day", "2")
          if(dx!=null){
            Hbase_insert(conn, "keliu", "1", "day", "3", dx)
          }
          var dx2 = Hbase_get(conn, "keliu", "1", "day", "1")
          if(dx2!=null){
            val x:Double=(ke_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "keliu", "1", "h_day", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "day", "2", dx2)
          }
          Hbase_insert(conn, "keliu", "1", "day", "1", ke_day.toString)

          dx = Hbase_get(conn, "rudian", "1", "day", "2")
          if(dx!=null){
            Hbase_insert(conn, "rudian", "1", "day", "3", dx)
          }
          dx2 = Hbase_get(conn, "rudian", "1", "day", "1")
          if(dx2!=null){
            val x:Double=(ru_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "rudian", "1", "h_day", "1", x.toString)
            Hbase_insert(conn, "rudian", "1", "day", "2", dx2)
          }
          Hbase_insert(conn, "rudian", "1", "day", "1", ru_day.toString)

          rur_day=ru_day.toDouble/ke_day.toDouble
          dx = Hbase_get(conn, "rudr", "1", "day", "2")
          if(dx!=null){
            Hbase_insert(conn, "rudr", "1", "day", "3", dx)
          }
          dx2 = Hbase_get(conn, "rudr", "1", "day", "1")
          if(dx2!=null){
            val x:Double=(rur_day-dx2.toDouble)/dx2.toDouble
            Hbase_insert(conn, "rudr", "1", "h_day", "1", x.toString)
            Hbase_insert(conn, "rudr", "1", "day", "2", dx2)
          }
          Hbase_insert(conn, "rudr", "1", "day", "1", rur_day.toString)

          dx2 = Hbase_get(conn, "zhouqi1", "1", "h_day", "2")
          if(dx2!=null){
            val x:Double=(zq1_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "zhouqi1", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi1", "1", "h_day", "2", zq1_day.toString)
          dx2 = Hbase_get(conn, "zhouqi2", "1", "h_day", "2")
          if(dx2!=null){
            val x:Double=(zq2_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "zhouqi2", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi2", "1", "h_day", "2", zq2_day.toString)
          dx2 = Hbase_get(conn, "zhouqi3", "1", "h_day", "2")
          if(dx2!=null){
            val x:Double=(zq3_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "zhouqi3", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi3", "1", "h_day", "2", zq3_day.toString)
          dx2 = Hbase_get(conn, "zhouqi4", "1", "h_day", "2")
          if(dx2!=null){
            val x:Double=(zq4_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "zhouqi4", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi4", "1", "h_day", "2", zq4_day.toString)
          dx2 = Hbase_get(conn, "zhouqi5", "1", "h_day", "2")
          if(dx2!=null){
            val x:Double=(zq5_day-dx2.toInt).toDouble/dx2.toDouble
            Hbase_insert(conn, "zhouqi5", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi5", "1", "h_day", "2", zq5_day.toString)

          xms=new_day.toDouble/old_day.toDouble
          hx2 = Hbase_get(conn, "new_old", "1", "h_day", "2")
          if(hx2!=null){
            val x:Double=(xms-hx2.toDouble)/hx2.toDouble
            Hbase_insert(conn, "new_old", "1", "h_day", "1", x.toString)
          }
          Hbase_insert(conn, "new_old", "1", "h_day", "2", xms.toString)
          ru_day=0
          ke_day=0
          zq1_day=0
          zq2_day=0
          zq3_day=0
          zq4_day=0
          zq5_day=0
          new_day=0
          old_day=0
        }
        else {
          ke_day+=ke_hour
          ru_day+=ru_hour
          zq1_day+=zq1_hour
          zq2_day+=zq2_hour
          zq3_day+=zq3_hour
          zq4_day+=zq4_hour
          zq5_day+=zq5_hour
          new_day+=new_hour
          old_day+=old_hour
        }

        if(last_week==0){
          last_week=24*7
          var wx = Hbase_get(conn, "keliu", "1", "week", "3")
          if(wx!=null){
            Hbase_insert(conn, "keliu", "1", "week", "4", wx)
          }
          var wx2 = Hbase_get(conn, "keliu", "1", "week", "2")
          if(wx2!=null){
            Hbase_insert(conn, "keliu", "1", "week", "3", wx2)
          }
          var wx3 = Hbase_get(conn, "keliu", "1", "week", "1")
          if(wx3!=null){
            val x:Double=(ke_week-wx3.toInt).toDouble/wx3.toDouble
            Hbase_insert(conn, "keliu", "1", "h_week", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "week", "2", wx3)
          }
          Hbase_insert(conn, "keliu", "1", "week", "1", ke_week.toString)

          wx = Hbase_get(conn, "rudian", "1", "week", "3")
          if(wx!=null){
            Hbase_insert(conn, "rudian", "1", "week", "4", wx)
          }
          wx2 = Hbase_get(conn, "rudian", "1", "week", "2")
          if(wx2!=null){
            Hbase_insert(conn, "rudian", "1", "week", "3", wx2)
          }
          wx3 = Hbase_get(conn, "rudian", "1", "week", "1")
          if(wx3!=null){
            val x:Double=(ru_week-wx3.toInt).toDouble/wx3.toDouble
            Hbase_insert(conn, "rudian", "1", "h_week", "1", x.toString)
            Hbase_insert(conn, "rudian", "1", "week", "2", wx3)
          }
          Hbase_insert(conn, "rudian", "1", "week", "1", ru_week.toString)

          rur_week=ru_week.toDouble/ke_week.toDouble
          wx = Hbase_get(conn, "rudr", "1", "week", "3")
          if(wx!=null){
            Hbase_insert(conn, "rudr", "1", "week", "4", wx)
          }
          wx2 = Hbase_get(conn, "rudr", "1", "week", "2")
          if(wx2!=null){
            Hbase_insert(conn, "rudr", "1", "week", "3", wx2)
          }
          wx3 = Hbase_get(conn, "rudr", "1", "week", "1")
          if(wx3!=null){
            val x:Double=(rur_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "rudr", "1", "h_week", "1", x.toString)
            Hbase_insert(conn, "rudr", "1", "week", "2", wx3)
          }
          Hbase_insert(conn, "rudr", "1", "week", "1", rur_week.toString)

          wx3 = Hbase_get(conn, "zhouqi1", "1", "h_week", "2")
          if(wx3!=null){
            val x:Double=(zq1_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "zhouqi1", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi1", "1", "week", "2", zq1_week.toString)
          wx3 = Hbase_get(conn, "zhouqi2", "1", "h_week", "2")
          if(wx3!=null){
            val x:Double=(zq2_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "zhouqi2", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi2", "1", "week", "2", zq2_week.toString)
          wx3 = Hbase_get(conn, "zhouqi3", "1", "h_week", "2")
          if(wx3!=null){
            val x:Double=(zq3_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "zhouqi3", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi3", "1", "week", "2", zq3_week.toString)
          wx3 = Hbase_get(conn, "zhouqi4", "1", "h_week", "2")
          if(wx3!=null){
            val x:Double=(zq4_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "zhouqi4", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi4", "1", "week", "2", zq4_week.toString)
          wx3 = Hbase_get(conn, "zhouqi5", "1", "h_week", "2")
          if(wx3!=null){
            val x:Double=(zq5_week-wx3.toDouble)/wx3.toDouble
            Hbase_insert(conn, "zhouqi5", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi5", "1", "week", "2", zq5_week.toString)

          xms=new_week.toDouble/old_week.toDouble
          hx2 = Hbase_get(conn, "new_old", "1", "h_week", "2")
          if(hx2!=null){
            val x:Double=(xms-hx2.toDouble)/hx2.toDouble
            Hbase_insert(conn, "new_old", "1", "h_week", "1", x.toString)
          }
          Hbase_insert(conn, "new_old", "1", "h_week", "2", xms.toString)
          ru_week=0
          ke_week=0
          zq1_week=0
          zq2_week=0
          zq3_week=0
          zq4_week=0
          zq5_week=0
          new_week=0
          old_week=0
        }
        else {
          ke_week+=ke_hour
          ru_week+=ru_hour
          zq1_week+=zq1_hour
          zq2_week+=zq2_hour
          zq3_week+=zq3_hour
          zq5_week+=zq5_hour
          zq4_week+=zq4_hour
          new_week+=new_hour
          old_week+=old_hour
        }

        if(last_month==0){
          last_month=24*30
          var mx = Hbase_get(conn, "keliu", "1", "month", "2")
          if(mx!=null){
            Hbase_insert(conn, "keliu", "1", "month", "3", mx)
          }
          var mx2 = Hbase_get(conn, "keliu", "1", "month", "1")
          if(mx2!=null){
            val x:Double=(ke_month-mx2.toInt).toDouble/mx2.toDouble
            Hbase_insert(conn, "keliu", "1", "h_month", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "month", "2", mx2)
          }
          Hbase_insert(conn, "keliu", "1", "month", "1", ke_month.toString)

          mx = Hbase_get(conn, "rudian", "1", "month", "2")
          if(mx!=null){
            Hbase_insert(conn, "rudian", "1", "month", "3", mx)
          }
          mx2 = Hbase_get(conn, "rudian", "1", "month", "1")
          if(mx2!=null){
            val x:Double=(ru_month-mx2.toInt).toDouble/mx2.toDouble
            Hbase_insert(conn, "rudian", "1", "h_month", "1", x.toString)
            Hbase_insert(conn, "rudian", "1", "month", "2", mx2)
          }
          Hbase_insert(conn, "rudian", "1", "month", "1", ru_month.toString)

          rur_month=ru_month.toDouble/ke_month.toDouble
          mx = Hbase_get(conn, "rudr", "1", "month", "2")
          if(mx!=null){
            Hbase_insert(conn, "rudr", "1", "month", "3", mx)
          }
          mx2 = Hbase_get(conn, "rudr", "1", "month", "1")
          if(mx2!=null){
            val x:Double=(rur_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "rudr", "1", "h_month", "1", x.toString)
            Hbase_insert(conn, "rudr", "1", "month", "2", mx2)
          }
          Hbase_insert(conn, "rudr", "1", "month", "1", rur_month.toString)

          mx2 = Hbase_get(conn, "zhouqi1", "1", "month", "2")
          if(mx2!=null){
            val x:Double=(zq1_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "zhouqi1", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi1", "1", "h_month", "2", zq1_month.toString)
          mx2 = Hbase_get(conn, "zhouqi2", "1", "month", "2")
          if(mx2!=null){
            val x:Double=(zq2_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "zhouqi2", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi2", "1", "h_month", "2", zq2_month.toString)
          mx2 = Hbase_get(conn, "zhouqi3", "1", "month", "2")
          if(mx2!=null){
            val x:Double=(zq3_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "zhouqi3", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi3", "1", "h_month", "2", zq3_month.toString)
          mx2 = Hbase_get(conn, "zhouqi4", "1", "month", "2")
          if(mx2!=null){
            val x:Double=(zq4_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "zhouqi4", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi4", "1", "h_month", "2", zq4_month.toString)
          mx2 = Hbase_get(conn, "zhouqi5", "1", "month", "2")
          if(mx2!=null){
            val x:Double=(zq5_month-mx2.toDouble)/mx2.toDouble
            Hbase_insert(conn, "zhouqi5", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "zhouqi5", "1", "h_month", "2", zq5_month.toString)

          xms=new_month.toDouble/old_month.toDouble
          hx2 = Hbase_get(conn, "new_old", "1", "h_month", "2")
          if(hx2!=null){
            val x:Double=(xms-hx2.toDouble)/hx2.toDouble
            Hbase_insert(conn, "new_old", "1", "h_month", "1", x.toString)
          }
          Hbase_insert(conn, "new_old", "1", "h_month", "2", xms.toString)
          ru_month=0
          ke_month=0
          zq1_month=0
          zq2_month=0
          zq3_month=0
          zq4_month=0
          zq5_month=0
          new_month=0
          old_month=0
        }
        else {
          ke_month+=ke_hour
          ru_month+=ru_hour
          zq1_month+=zq1_hour
          zq2_month+=zq2_hour
          zq3_month+=zq3_hour
          zq4_month+=zq4_hour
          zq5_month+=zq5_hour
          new_month+=new_hour
          old_month+=old_hour
        }

        ke_hour=0
        ru_hour=0
        zq1_hour=0
        zq2_hour=0
        zq3_hour=0
        zq4_hour=0
        zq5_hour=0
        new_hour=0
        old_hour=0
      }
      else{
        ke_hour+=count_all
        ru_hour+=count_in
        zq1_hour+=t_num(0)
        zq2_hour+=t_num(1)
        zq3_hour+=t_num(2)
        zq4_hour+=t_num(3)
        zq5_hour+=t_num(4)
        new_hour+=t_num(0)
        old_hour+=count_in-x_num(0)
      }
    }

      //val df=new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy",Locale.ENGLISH)
      var time_dao = true
      while(time_dao){
        val time2=df.format(new Date())
        if(Times.Time_Duration_Seconds(time2,time1)>=3)
          time_dao=false
      }
    }
  //}
}
