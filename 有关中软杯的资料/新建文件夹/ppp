/**
  * Created by hadoop on 17-5-24.
  */
import org.apache.spark.SparkConf
import org.apache.hadoop.hbase.{HBaseConfiguration, TableName}
import org.apache.hadoop.hbase.client.{ConnectionFactory, Put}
import org.apache.hadoop.hbase.util.Bytes
import org.apache.hadoop.hbase.client._
import org.apache.spark.SparkContext
import org.apache.log4j.{Level, Logger}

import scala.collection.mutable.ArrayBuffer
import HBase_Con._
import org.apache.hadoop.hbase.mapreduce.TableInputFormat
import java.util.{Date, Locale}
import java.text.SimpleDateFormat


object wenjia1 {
  def main(args: Array[String]) {
    Logger.getLogger("org.apache.spark").setLevel(Level.ERROR)
    Logger.getLogger("org.eclipse.jetty.server").setLevel(Level.OFF)
    val sparkConf = new SparkConf().setAppName("sji").setMaster("local[2]")
    sparkConf.set("spark.testing.memory", "2147480000")
    val sc = new SparkContext(sparkConf)
    val config = HBaseConfiguration.create()
    val conn = ConnectionFactory.createConnection(config)
    def Hbase_count(name: String): Long = {
      config.set(TableInputFormat.INPUT_TABLE, name)
      val stuRDD = sc.newAPIHadoopRDD(config, classOf[TableInputFormat],
        classOf[org.apache.hadoop.hbase.io.ImmutableBytesWritable],
        classOf[org.apache.hadoop.hbase.client.Result])
      val count = stuRDD.count()
      count
    }
    /*Hbase_truncate(conn,"00aabbcc")
     Hbase_truncate(conn,"temp_log")
     Hbase_truncate(conn,"store_temp")
     Hbase_truncate(conn,"store_log")
     Hbase_truncate(conn,"store_time")
     Hbase_truncate(conn,"human_times")
     Hbase_truncate(conn,"human_history")
     Hbase_truncate(conn,"new_old_history")
     Hbase_truncate(conn,"count_human_times")
     Hbase_truncate(conn,"shop_times")
     Hbase_truncate(conn,"interview_times")
     Hbase_truncate(conn,"jump_log")
     Hbase_truncate(conn,"deep_log")
     Hbase_truncate(conn,"activity_log")*/
    var A: ArrayBuffer[People] = null
    var B: ArrayBuffer[People] = null
    //次数define
    var x_num: Array[Int] = new Array[Int](6)
    var t_num: Array[Int] = new Array[Int](7)
    var h_num: Array[Int] = new Array[Int](7)

    var new_people: Long = 0
    var old_people: Long = 0

    var last_hour=new String
    var last_day:Int=24
    var last_week:Int=24*7
    var last_month:Int=24*30
    var ke_hour:Long=0
    var ke_day:Long=0
    var ke_week:Long=0
    var ke_month:Long=0
    var flag_first=false
    val df=new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy",Locale.ENGLISH)
    val df2=new SimpleDateFormat("HH",Locale.ENGLISH)

    while(true){

    val time1=df.format(new Date())
    val count_all:Long=Hbase_count("00aabbcc")

    //遍历temp
    A = Hbase_scan2(conn, "00aabbcc")
    if(A.length!=0) {
      //插入客流量日志
      Hbase_insert(conn, "temp_log", A(0).time, "count", "1", count_all.toString)
      Hbase_insert(conn, "keliu", "1", "now", "1", count_all.toString)
      //判断是进店铺还是出店铺
      for (i <- 0 until A.length by 1) {
        val human_in = Hbase_get(conn, "store_temp", A(i).mac, "time", "1")
        val human_last_time = Hbase_get(conn, "human_history", A(i).mac, "this_time", "1")
        if (A(i).range.toInt < 100) {
          //进入店铺的人，判断是否是刚进来的
          if (human_in == null) {
            Hbase_insert(conn, "store_temp", A(i).mac, "time", "1", A(i).time)
          }
        }
        else {
          //在店铺外的人，判断是否是刚出去的
          if (human_in != null) {
            Hbase_deleteOne(conn, "store_temp", A(i).mac, "time", "1")
            //判断新老顾客，记录访问次数和时间
            val values = Hbase_get(conn, "human_times", A(i).mac, "values", "1")

            if (values == null) {
              x_num(0) += 1
              Hbase_insert(conn, "human_times", A(i).mac, "time", "1", human_in)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", "1")
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", human_in)
            }
            else {
              var x = values.toInt
              x += 1
              Hbase_insert(conn, "human_times", A(i).mac, "time", x.toString, human_in)
              Hbase_insert(conn, "human_times", A(i).mac, "values", "1", x.toString)
              //来访次数
              if (x == 2) x_num(1) += 1
              else if (x == 3) x_num(2) += 1
              else if (x == 4) x_num(3) += 1
              else if (x == 5) x_num(4) += 1
              else x_num(5) += 1

              Hbase_insert(conn, "human_history", A(i).mac, "last_time", "1", human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "this_time", "1", human_in)
              val n = Times.Time_Duration_Minutes(human_in, human_last_time)
              Hbase_insert(conn, "human_history", A(i).mac, "subtract", "1", n.toString)
              //来访周期
              if (n >= 0 && n < 12 * 60) t_num(0) += 1
              else if (n < 24 * 60 && n >= 12 * 60) t_num(1) += 1
              else if (n < 36 * 60 && n >= 24 * 60) t_num(2) += 1
              else if (n < 48 * 60 && n >= 36 * 60) t_num(3) += 1
              else if (n < 60 * 60 && n >= 48 * 60) t_num(4) += 1
              else if (n < 72 * 60 && n >= 60 * 60) t_num(5) += 1
              else t_num(6) += 1
            }

            Hbase_insert(conn, "store_time", A(i).mac, "intime", "1", human_in)
            Hbase_insert(conn, "store_time", A(i).mac, "outtime", "1", A(i).time)
            val num = Times.Time_Duration_Seconds(A(i).time, human_in)
            Hbase_insert(conn, "store_time", A(i).mac, "subtract", "1", num.toString)
            //顾客活跃度
            if (num <= 1*60 && num >= 0) h_num(0) += 1
            else if (num > 1*60 && num <= 5*60) h_num(1) += 1
            else if (num > 5*60 && num <= 10*60) h_num(2) += 1
            else if (num > 10*60 && num <= 15*60) h_num(3) += 1
            else if (num > 15*60 && num <= 30*60) h_num(4) += 1
            else if (num > 30*60 && num < 60*60) h_num(5) += 1
            else h_num(6) += 1
          }
        }
      }

      Hbase_insert(conn, "count_human_times", A(0).time, "1", "1", x_num(0).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "2", "1", x_num(1).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "3", "1", x_num(2).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "4", "1", x_num(3).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "5", "1", x_num(4).toString)
      Hbase_insert(conn, "count_human_times", A(0).time, "other", "1", x_num(5).toString)

      Hbase_insert(conn, "shop_times", A(0).time, "1", "1", h_num(0).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "5", "1", h_num(1).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "10", "1", h_num(2).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "15", "1", h_num(3).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "30", "1", h_num(4).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "60", "1", h_num(5).toString)
      Hbase_insert(conn, "shop_times", A(0).time, "other", "1", h_num(6).toString)


      Hbase_insert(conn, "interview_times", A(0).time, "12", "1", t_num(0).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "24", "1", t_num(1).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "36", "1", t_num(2).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "48", "1", t_num(3).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "60", "1", t_num(4).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "72", "1", t_num(5).toString)
      Hbase_insert(conn, "interview_times", A(0).time, "other", "1", t_num(6).toString)

      //计算入店量和入店率
      val count_in = Hbase_count("store_temp")
      Hbase_insert(conn, "store_log", A(0).time, "count", "1", count_in.toString)
      Hbase_insert(conn, "store_log", A(0).time, "rate", "1", (count_in.toDouble / count_all.toDouble).toString)

      //当前店铺里的新老顾客数

      B = Hbase_scan1(conn, "store_temp")
      new_people= 0
      old_people = 0
      for (i <- 0 until B.length by 1) {
        val human_in = Hbase_get(conn, "human_history", B(i).mac, "this_time", "1")
        if (human_in == null) {
          new_people += 1
        }
        else {
          old_people += 1
        }
      }
      if(B.length!=0) {
        Hbase_insert(conn, "new_old_history", B(0).time, "new", "1", new_people.toString)
        Hbase_insert(conn, "new_old_history", B(0).time, "old", "1", old_people.toString)
        Hbase_insert(conn, "new_old_history", B(0).time, "rate", "1", (new_people.toDouble / old_people.toDouble).toString)
      }
      Hbase_insert(conn,"jump_log",A(0).time,"jump_human","1",h_num(0).toString)
      Hbase_insert(conn,"jump_log",A(0).time,"all_human","1",count_all.toString)
      Hbase_insert(conn,"jump_log",A(0).time,"rate","1",(h_num(0).toDouble/count_all.toDouble).toString)

      Hbase_insert(conn,"deep_log",A(0).time,"num","1",(h_num(5)+h_num(6)).toString)
      Hbase_insert(conn,"deep_log",A(0).time,"all","1",count_all.toString)
      Hbase_insert(conn,"deep_log",A(0).time,"rate","1",((h_num(5)+h_num(6)).toDouble/count_all.toDouble).toString)

      Hbase_insert(conn,"activity_log",A(0).time,"high","1",(t_num(0)+t_num(1)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"medium","1",(t_num(2)+t_num(3)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"low","1",(t_num(4)+t_num(5)).toString)
      Hbase_insert(conn,"activity_log",A(0).time,"sleep","1",t_num(6).toString)


      if(!flag_first){
        flag_first=true
        last_hour=A(0).time
        last_day=24
        last_week=24*7
        last_month=24*30
      }
      //记录历史(前一小时、一天、一周、一月）
      if(Times.Time_Duration_Minutes(A(0).time,last_hour)>=60){ //环比（时、天、周、月）
        last_hour=A(0).time

        val HH=df2.format(new Date())
        Hbase_insert(conn, "day_keliu", "1", "hour", HH, ke_hour.toString)

        val hx = Hbase_get(conn, "keliu", "1", "hour", "2")
        if(hx!=null){
          Hbase_insert(conn, "keliu", "1", "hour", "3", hx)
        }
        val hx2 = Hbase_get(conn, "keliu", "1", "hour", "1")
        if(hx2!=null){
          val x=(ke_hour-hx2.toInt)/hx2.toInt
          Hbase_insert(conn, "keliu", "1", "h_hour", "1", x.toString)
          Hbase_insert(conn, "keliu", "1", "hour", "2", hx2)
        }
        Hbase_insert(conn, "keliu", "1", "hour", "1", ke_hour.toString)
        last_day-=1
        last_month-=1
        last_week-=1
        if(last_day==0){
          last_day=24
          val dx = Hbase_get(conn, "keliu", "1", "day", "2")
          if(hx!=null){
            Hbase_insert(conn, "keliu", "1", "day", "3", dx)
          }
          val dx2 = Hbase_get(conn, "keliu", "1", "day", "1")
          if(hx2!=null){
            val x=(ke_day-dx2.toInt)/dx2.toInt
            Hbase_insert(conn, "keliu", "1", "h_day", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "day", "2", dx2)
          }
          Hbase_insert(conn, "keliu", "1", "day", "1", ke_day.toString)
          ke_day=0
        }
        else ke_day+=ke_hour

        if(last_week==0){
          last_week=24*7
          val wx = Hbase_get(conn, "keliu", "1", "week", "3")
          if(wx!=null){
            Hbase_insert(conn, "keliu", "1", "week", "4", wx)
          }
          val wx2 = Hbase_get(conn, "keliu", "1", "week", "2")
          if(wx2!=null){
            Hbase_insert(conn, "keliu", "1", "week", "3", wx2)
          }
          val wx3 = Hbase_get(conn, "keliu", "1", "week", "1")
          if(wx3!=null){
            val x=(ke_week-wx3.toInt)/wx3.toInt
            Hbase_insert(conn, "keliu", "1", "h_week", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "week", "2", wx3)
          }
          Hbase_insert(conn, "keliu", "1", "week", "1", ke_week.toString)
          ke_week=0
        }
        else ke_week+=ke_hour
        if(last_month==0){
          last_month=24*30
          val mx = Hbase_get(conn, "keliu", "1", "month", "2")
          if(mx!=null){
            Hbase_insert(conn, "keliu", "1", "month", "3", mx)
          }
          val mx2 = Hbase_get(conn, "keliu", "1", "month", "1")
          if(mx2!=null){
            val x=(ke_month-mx2.toInt)/mx2.toInt
            Hbase_insert(conn, "keliu", "1", "h_month", "1", x.toString)
            Hbase_insert(conn, "keliu", "1", "month", "2", mx2)
          }
          Hbase_insert(conn, "keliu", "1", "month", "1", ke_month.toString)
          ke_month=0
        }
        else ke_month+=ke_hour

        ke_hour=0
      }
      else{
        ke_hour+=count_all
      }
    }

      //val df=new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy",Locale.ENGLISH)
      var time_dao = true
      while(time_dao){
        val time2=df.format(new Date())
        if(Times.Time_Duration_Seconds(time2,time1)>3)
          time_dao=false
      }
    }
  }
}
